from __future__ import print_function  # For Python 3 compatibility

# Refernce alphabet
alphabet = u"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

# Encrypted alphabet
key13 = u"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM"

# Translation table
# The table generated by maketrans() does not work with str.translate if
# unicode characters are used. A dictionary had to be made manually.

table13 = {}  # Initialize translation table
for i in range(len(alphabet)):
    # Generate translation table
    table13.update({ord(alphabet[i]): key13[i]})

# Example text
plain_text = u"""For instance, on the planet Earth, man had always assumed that the was more intelligent than dolphins because he had achieved so much - the wheel, New York, wars and so on - whilst all the dolphins had ever done was muck about in the water having a good time. But conversely, the dolphins had always believed that they were far more intelligent than man - for precisely the same reasons."""

# Encryption via str.translate()
print(plain_text)


def rot13(text, table):
    """ Encryption via the translate method for strings"""
    encrypted_text = text.translate(table13)
    return encrypted_text

encrypted_text = rot13(plain_text, table13)
print(encrypted_text)

if __name__ == '__main__':

    # Test case 1: Does it properly encrypt the alphabet?
    assert rot13(alphabet, table13) == key13

    # Test case 2: Does it ignore punctuation adn white space?
    punc = u"~!@#$%^& * ()_+`-={}|[]\:'<>?,./"
    assert rot13(punc, table13) == punc

    print(u"All tests passed.")
